#!/usr/bin/env bash

# very cheap check if parameters are set
[[ $# -lt 2 ]] && { echo "usage: $0 [start,stop,deploy,decomission] [CUSTOMER]" ; exit 1 ; }

MODE=${1}
CUSTOMER=${2}

SELF_DIR=$(git rev-parse --show-toplevel)
export SSHDIR=${SELF_DIR}/${CUSTOMER}/.ssh

export APPVER=$(docker run -i --rm --name yq 300481/yq:v2.4.0 appver < ${CUSTOMER}/config.yaml)
export DNSVER=$(docker run -i --rm --name yq 300481/yq:v2.4.0 dnsver < ${CUSTOMER}/config.yaml)
export RKEVER=$(docker run -i --rm --name yq 300481/yq:v2.4.0 rkever < ${CUSTOMER}/config.yaml)
export KCTLVER=$(docker run -i --rm --name yq 300481/yq:v2.4.0 kctlver < ${CUSTOMER}/config.yaml)

JQ="docker run -i --rm 300481/jq:v1.6"
KUBECTL="docker run -i --rm -v ${SELF_DIR}/${CUSTOMER}:/data 300481/kubectl:${KCTLVER}"
RKE="docker run -it --rm --name rke -v ${SELF_DIR}/${CUSTOMER}:/data -v ${SSHDIR}:/.ssh 300481/rke:${RKEVER}"
URL_READINESS="localhost:8080/api/readiness"

runInit() {
    [[ -d ${SELF_DIR}/../file-permission-hooks ]] && return
    git clone https://github.com/300481/file-permission-hooks.git ${SELF_DIR}/../file-permission-hooks
    for HOOK in $(find ${SELF_DIR}/../file-permission-hooks/ -maxdepth 1 -executable -type f) ; do
        ln -s ${HOOK} ${SELF_DIR}/.git/hooks/${HOOK##*/}
    done
}

startApp() {
    runInit
    git checkout $(git rev-parse --abbrev-ref HEAD)
    keyGen
    docker-compose up -d
    loadConfig
}

stopApp() {
    docker-compose down 2>/dev/null
}

loadConfig() {
    uploadTemplates
    uploadConfig
    uploadClusterConfig
}

keyGen() {
    if [[ -f ${CUSTOMER}/.ssh/id_rsa ]] ; then
        return
    fi
    if ! [[ -d ${SSHDIR} ]] ; then
        mkdir -p ${SSHDIR}
        chmod 700 ${SSHDIR}
    fi
    ssh-keygen -t rsa -b 4096 -f ${SSHDIR}/id_rsa -P "" -C "" -q
    return
}

uploadTemplates() {
    cd ${CUSTOMER}
    for TEMPLATE in $(find api -type f) ; do
        curl -X POST -d "$(< ${TEMPLATE})" localhost:8080/${TEMPLATE}
    done
    cd ..
}

uploadConfig() {
    export GW=$(ip route | awk '/default/ { print $3 }')
    export IP=$(ip route | awk '/default/ { print $9 }')
    export PUBKEY=$(< ${SSHDIR}/id_rsa.pub)
    curl -X POST -d "$(envsubst < ${CUSTOMER}/config.yaml)" localhost:8080/api/config
}

uploadClusterConfig() {
    if [[ -f ${CUSTOMER}/cluster.json ]] ; then
        curl -X POST -d "$(< ${CUSTOMER}/cluster.json)" localhost:8080/api/cluster
    fi
}

startK8sAppOperator() {
    APP_OPERATOR_URL="https://raw.githubusercontent.com/300481/kubernetes-applications-operator-watchdog/master/scripts/start-operator.sh"
    curl -s ${APP_OPERATOR_URL} | bash
}

deploy() {
    startApp
    echo -n "Waiting for cluster deployment..."
    while [[ $(curl -s ${URL_READINESS} | ${JQ} .connect) == false ]] ; do
        echo -n "."
        sleep 10
    done
    echo "OK"
    echo "Install Rancher Kubernetes Engine"
    echo ""
    echo ""
    echo "Getting 3141 cluster config"    
    curl -s localhost:8080/api/cluster > ${CUSTOMER}/cluster.json
    echo "Getting rke cluster config"    
    curl -s localhost:8080/api/tpl/cluster > ${CUSTOMER}/cluster.yml
    sleep 2
    ${RKE} up
    ${KUBECTL} get nodes
    startK8sAppOperator
}

decomission() {
    ${RKE} remove
}

case ${MODE} in
    start)
        startApp
        ;;
    stop)
        stopApp
        ;;
    deploy)
        deploy
        ;;
    decomission)
        decomission
        ;;
    *)
        echo "usage: $0 [start,stop,deploy,decomission] [CUSTOMER]"
        ;;
esac
